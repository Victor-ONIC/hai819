#version 460

#define M_PI 3.1415926535897932384626433832795

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer BlockData {
    uint data[]; // Le tableau de données
};

uniform int map_width;
uniform int map_height;
uniform int map_depth;
uniform sampler2D permTexture;
uniform sampler2D gradTexture;

#define ONE 0.00390625
#define ONEHALF 0.001953125

float fade(float t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0); // Improved fade, yields C2-continuous noise
}

/*
 * 2D classic Perlin noise. Fast, but less useful than 3D noise.
 */
float noise(vec2 P, float coef_pow, int bool_pow)
{
  vec2 Pi = ONE*floor(P)+ONEHALF; // Integer part, scaled and offset for texture lookup
  vec2 Pf = fract(P);             // Fractional part for interpolation

  // Noise contribution from lower left corner
  vec2 grad00 = texture(permTexture, Pi).rg * 4.0 - 1.0;
  float n00 = dot(grad00, Pf);

  // Noise contribution from lower right corner
  vec2 grad10 = texture(permTexture, Pi + vec2(ONE, 0.0)).rg * 4.0 - 1.0;
  float n10 = dot(grad10, Pf - vec2(1.0, 0.0));

  // Noise contribution from upper left corner
  vec2 grad01 = texture(permTexture, Pi + vec2(0.0, ONE)).rg * 4.0 - 1.0;
  float n01 = dot(grad01, Pf - vec2(0.0, 1.0));

  // Noise contribution from upper right corner
  vec2 grad11 = texture(permTexture, Pi + vec2(ONE, ONE)).rg * 4.0 - 1.0;
  float n11 = dot(grad11, Pf - vec2(1.0, 1.0));

  // Blend contributions along x
  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade(Pf.x));

  // Blend contributions along y
  float n_xy = mix(n_x.x, n_x.y, fade(Pf.y));

  // We're done, return the final noise value.
  if(bool_pow == 1) return pow(abs(n_xy), coef_pow); // Réduit les zones plates
  return n_xy;
}

float noise(vec3 P, float coef_pow, int bool_pow){
  vec3 Pi = ONE*floor(P)+ONEHALF; // Integer part, scaled so +1 moves one texel
                                  // and offset 1/2 texel to sample texel centers
  vec3 Pf = fract(P);     // Fractional part for interpolation
  // Noise contributions from (x=0, y=0), z=0 and z=1
  float perm00 = texture(permTexture, Pi.xy).a ;
  vec3  grad000 = texture(permTexture, vec2(perm00, Pi.z)).rgb * 4.0 - 1.0;
  float n000 = dot(grad000, Pf);
  vec3  grad001 = texture(permTexture, vec2(perm00, Pi.z + ONE)).rgb * 4.0 - 1.0;
  float n001 = dot(grad001, Pf - vec3(0.0, 0.0, 1.0));
  // Noise contributions from (x=0, y=1), z=0 and z=1
  float perm01 = texture(permTexture, Pi.xy + vec2(0.0, ONE)).a ;
  vec3  grad010 = texture(permTexture, vec2(perm01, Pi.z)).rgb * 4.0 - 1.0;
  float n010 = dot(grad010, Pf - vec3(0.0, 1.0, 0.0));
  vec3  grad011 = texture(permTexture, vec2(perm01, Pi.z + ONE)).rgb * 4.0 - 1.0;
  float n011 = dot(grad011, Pf - vec3(0.0, 1.0, 1.0));
  // Noise contributions from (x=1, y=0), z=0 and z=1
  float perm10 = texture(permTexture, Pi.xy + vec2(ONE, 0.0)).a ;
  vec3  grad100 = texture(permTexture, vec2(perm10, Pi.z)).rgb * 4.0 - 1.0;
  float n100 = dot(grad100, Pf - vec3(1.0, 0.0, 0.0));
  vec3  grad101 = texture(permTexture, vec2(perm10, Pi.z + ONE)).rgb * 4.0 - 1.0;
  float n101 = dot(grad101, Pf - vec3(1.0, 0.0, 1.0));
  // Noise contributions from (x=1, y=1), z=0 and z=1
  float perm11 = texture(permTexture, Pi.xy + vec2(ONE, ONE)).a ;
  vec3  grad110 = texture(permTexture, vec2(perm11, Pi.z)).rgb * 4.0 - 1.0;
  float n110 = dot(grad110, Pf - vec3(1.0, 1.0, 0.0));
  vec3  grad111 = texture(permTexture, vec2(perm11, Pi.z + ONE)).rgb * 4.0 - 1.0;
  float n111 = dot(grad111, Pf - vec3(1.0, 1.0, 1.0));
  // Blend contributions along x
  vec4 n_x = mix(vec4(n000, n001, n010, n011),
                 vec4(n100, n101, n110, n111), fade(Pf.x));
  // Blend contributions along y
  vec2 n_xy = mix(n_x.xy, n_x.zw, fade(Pf.y));
  // Blend contributions along z
  float n_xyz = mix(n_xy.x, n_xy.y, fade(Pf.z));
  // We're done, return the final noise value.
  if(bool_pow == 1) return pow(abs(n_xyz), coef_pow); // Réduit les zones plates
  return n_xyz;
}

// Fonction pour convertir (x, y, z) en un index 1D
uint index3DTo1D(uint x, uint y, uint z, uint width, uint height) {
    return x + y * width + z * (width * height);
}

// Fonction pour convertir un index 1D en coordonnées 3D (x, y, z)
vec3 index1DTo3D(uint index, uint width, uint height, uint depth) {
    uint y = index / (width * depth);
    uint z = (index % (width * depth)) / width;
    uint x = index % width;
    return vec3(float(x) / width, float(y) / height, float(z) / depth);
}

vec3 normalize_id(ivec3 id, uint width, uint height, uint depth){
    return vec3(float(id.x) / float(width), float(id.y) / float(height), float(id.z) / float(depth));
}

uint compute_2D(float noise, float ground_height, float ind3D_y){
    if((noise / 4.0) + ground_height > ind3D_y) return 1;
    return 0;
}

uint compute_3D(vec3 ind3D, uint type, float noise){
    if(((noise * (2.0 - ind3D.y) - 0.5) > 0.3) && (type == 1 || type == 3)) return 0;
    return type;
}

void main()
{
    ivec3 id = ivec3(gl_GlobalInvocationID.xyz);
    uint id1D = index3DTo1D(id.x, id.y, id.z, map_width, map_height);
    vec3 pos;
    uint gid = gl_GlobalInvocationID.x;
    float noise_2D = 0.0, noise_3D = 0.0, A = 1.0, mf = 1.0;
    vec3 offset = vec3(1.0);
    float zoom2D = 1.5, zoom3D = 4.7;
    vec3 ind3D = normalize_id(id, map_width, map_height, map_depth);
    vec2 indxz = ind3D.xz;
    float coef_pow2D = 1.85, coef_pow3D = 6.85;
    int bool_pow2D = 0, bool_pow3D = 0;
    float ground_height = 0.25;
    float max_empty = 1.0 - abs(0.5 - ind3D.y) + 0.85;

    for(int i = 0; i < 5; ++i) {
        noise_2D += A * noise(zoom2D * mf * indxz, coef_pow2D, bool_pow2D);
        noise_3D += A * noise(zoom3D * mf * ind3D, coef_pow3D, bool_pow3D);
        A = A / 2.0;
        mf = mf * 2.0;
    }
    //n = 1.0 - n;
    //data[gid] = 0;
    //data[gid] = compute_2D(noise_2D, ground_height, ind3D.y);
    //data[gid] = compute_3D(data[gid], noise_3D);
    data[id1D] = compute_3D(ind3D, data[id1D], noise_3D);
    //if(noise_3D > 0.5) data[gid] = 1;
    //data[gid] = compute_3D(noise_3D, max_empty);
}
