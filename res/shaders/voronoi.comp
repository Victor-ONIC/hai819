#version 460
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer BlockData {
    uint data[]; // Le tableau de données
};

uniform int u_seed;
uniform int chunk_x;
uniform int chunk_z;
uniform int map_width;
uniform int map_height;
uniform int map_depth;
//
uniform float cell_size; // taille d'une cellule Voronoï

uvec2 index2Dto1D(ivec2 coord, int width) {
    return uvec2(coord.y * width + coord.x, 0);
}

// Hash qui retourne un float entre 0.0 et 1.0
float hash12(ivec2 p) {
    uint h = uint(p.x * 374761393 + p.y * 668265263 + u_seed);
    h = (h ^ (h >> 13)) * 1274126177u;
    return float(h & 0xFFFFFFu) / float(0xFFFFFFu);
}

// Retourne une position locale du site Voronoï dans la cellule
vec2 voronoiSite(ivec2 cell) {
    return vec2(cell) * cell_size + vec2(hash12(cell), hash12(cell + ivec2(7, 3))) * cell_size;
}

uint cellID(ivec2 p) {
    uint h = uint(p.x) * 374761393u + uint(p.y) * 668265263u + uint(u_seed);
    h = (h ^ (h >> 13)) * 1274126177u;
    h ^= (h >> 16);
    return h;
}

// Fonction pour convertir (x, y, z) en un index 1D
uint index3DTo1D(uint x, uint y, uint z, uint width, uint height) {
    return x + y * width + z * (width * height);
}

void main() {
    ivec3 id = ivec3(gl_GlobalInvocationID.xyz);
    uvec3 global_id = gl_GlobalInvocationID.xyz;
    uint id1D = index3DTo1D(id.x, id.y, id.z, map_width, map_height);
    int gx = int(global_id.x) + chunk_x;
    int gz = int(global_id.z) + chunk_z;
    vec2 pos = vec2(gx, gz);
    vec2 world_pos = pos + vec2(0.5);

    float min_dist = 1e9;
    uint closest_id = 0u;

    ivec2 cell_coord = ivec2(floor(world_pos / cell_size));
    for (int j = -1; j <= 1; ++j) {
        for (int i = -1; i <= 1; ++i) {
            ivec2 neighbor = cell_coord + ivec2(i, j);
            vec2 site_pos = voronoiSite(neighbor);
            float d = distance(world_pos, site_pos);
            if (d <= min_dist) {
                min_dist = d;
                closest_id = cellID(neighbor);
            }
        }
    }

    data[id1D] = 1 + closest_id % 3;
}
