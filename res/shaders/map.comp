#version 460

#define M_PI 3.1415926535897932384626433832795

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer BlockData {
    uint data[]; // Le tableau de donnÃ©es
};

uniform int map_width;
uniform int map_height;
uniform int map_depth;
uniform sampler2D permTexture;
uniform sampler2D gradTexture;

#define ONE 0.00390625
#define ONEHALF 0.001953125

float fade(float t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0); // Improved fade, yields C2-continuous noise
}

/*
 * 2D classic Perlin noise. Fast, but less useful than 3D noise.
 */
float noise(vec2 P, float coef_pow, int bool_pow)
{
  vec2 Pi = ONE*floor(P)+ONEHALF; // Integer part, scaled and offset for texture lookup
  vec2 Pf = fract(P);             // Fractional part for interpolation

  // Noise contribution from lower left corner
  vec2 grad00 = texture(permTexture, Pi).rg * 4.0 - 1.0;
  float n00 = dot(grad00, Pf);

  // Noise contribution from lower right corner
  vec2 grad10 = texture(permTexture, Pi + vec2(ONE, 0.0)).rg * 4.0 - 1.0;
  float n10 = dot(grad10, Pf - vec2(1.0, 0.0));

  // Noise contribution from upper left corner
  vec2 grad01 = texture(permTexture, Pi + vec2(0.0, ONE)).rg * 4.0 - 1.0;
  float n01 = dot(grad01, Pf - vec2(0.0, 1.0));

  // Noise contribution from upper right corner
  vec2 grad11 = texture(permTexture, Pi + vec2(ONE, ONE)).rg * 4.0 - 1.0;
  float n11 = dot(grad11, Pf - vec2(1.0, 1.0));

  // Blend contributions along x
  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade(Pf.x));

  // Blend contributions along y
  float n_xy = mix(n_x.x, n_x.y, fade(Pf.y));

  // We're done, return the final noise value.
  if(bool_pow == 1) return pow(abs(n_xy), coef_pow); // RÃ©duit les zones plates
  return n_xy;
}

// Fonction pour convertir un index 1D en coordonnÃ©es 3D (x, y, z)
vec3 index1DTo3D(uint index, uint width, uint height, uint depth) {
    uint y = index / (width * depth);
    uint z = (index % (width * depth)) / width;
    uint x = index % width;
    return vec3(float(x) / width, float(y) / height, float(z) / depth);
}

uint compute_2D(float noise, float ground_height, float ind3D_y){
    if((noise / 4.0) + ground_height > ind3D_y) return 1;
    if(ind3D_y < 5) return 2;
    return 0;
}

void main()
{
    uint gid = gl_GlobalInvocationID.x;
    float noise_2D = 0.0, A = 1.0, mf = 1.0;
    vec3 offset = vec3(1.0);
    float zoom2D = 1.5;
    vec3 ind3D = index1DTo3D(gid, map_width, map_height, map_depth);
    vec2 indxz = ind3D.xz;
    float coef_pow2D = 1.85;
    int bool_pow2D = 0;
    float ground_height = 0.25;

    for(int i = 0; i < 5; ++i) {
        noise_2D += A * noise(zoom2D * mf * indxz, coef_pow2D, bool_pow2D);
        A = A / 2.0;
        mf = mf * 2.0;
    }
    //n = 1.0 - n;
    data[gid] = 0;
    data[gid] = compute_2D(noise_2D, ground_height, ind3D.y);
}
