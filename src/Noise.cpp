#include "Noise.h"


static int grad3[16][3] = { {0, 1,  1}, { 0,  1, -1}, { 0, -1, 1}, { 0, -1, -1},
                            {1, 0,  1}, { 1,  0, -1}, {-1,  0, 1}, {-1,  0, -1},
                            {1, 1,  0}, { 1, -1,  0}, {-1,  1, 0}, {-1, -1,  0},
                            {1, 0, -1}, {-1, 0,  -1}, { 0, -1, 1}, { 0,  1,  1} };

static int grad4[32][4] = { { 0,  1, 1, 1}, { 0,  1,  1, -1}, { 0,  1, -1, 1}, { 0,  1, -1, -1},
                            { 0, -1, 1, 1}, { 0, -1,  1, -1}, { 0, -1, -1, 1}, { 0, -1, -1, -1},
                            { 1,  0, 1, 1}, { 1,  0,  1, -1}, { 1,  0, -1, 1}, { 1,  0, -1, -1},
                            {-1,  0, 1, 1}, {-1,  0,  1, -1}, {-1,  0, -1, 1}, {-1,  0, -1, -1},
                            { 1,  1, 0, 1}, { 1,  1,  0, -1}, { 1, -1,  0, 1}, { 1, -1,  0, -1},
                            {-1,  1, 0, 1}, {-1,  1,  0, -1}, {-1, -1,  0, 1}, {-1, -1,  0, -1},
                            { 1,  1, 1, 0}, { 1,  1, -1,  0}, { 1, -1,  1, 0}, { 1, -1, -1,  0},
                            {-1,  1, 1, 0}, {-1,  1, -1,  0}, {-1, -1,  1, 0}, {-1, -1, -1,  0} };

Noise::Noise(size_t height)
{
  uint8_t v;
  uint8_t perm[256];

  //srand(time(NULL));

  for(int i=0 ; i<256 ; ++i){
    perm[i] = rand() % 256;
  }

  m_buffer.resize(1 << 18);/* 4 * 256 * 256 */

  for(int i = 0; i < 256; i++) {
    int i8 = i << 8;
    for(int j = 0; j < 256; j++) {
      int k = (i8 + j) << 2;
      v = perm[(j + perm[i]) & 0xFF];
      m_buffer[k + 0] = (grad4[v & 0x1F][0] << 6) + 64;
      m_buffer[k + 1] = (grad4[v & 0x1F][1] << 6) + 64;
      m_buffer[k + 2] = (grad4[v & 0x1F][2] << 6) + 64;
      m_buffer[k + 3] = (grad4[v & 0x1F][3] << 6) + 64;
    }
  }
}
